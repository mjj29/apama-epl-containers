<?xml version="1.0" encoding="UTF-8" standalone="no"?><Packages><Package depth="" display="&lt;Default Package&gt;" name=""/><Package depth="../../../" display="com.apamax.containers" name="com.apamax.containers"><Type category="Event" name="HeapIntegerComparator"><Description><![CDATA[A comparator for a heap containing integers.]]></Description><Summary><![CDATA[A comparator for a heap containing integers.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="increasing" type="boolean"><TypeParameters/></Member><Action name="compare" staticNature=""><Description><![CDATA[Compare two integers.]]></Description><Summary><![CDATA[Compare two integers.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="integer"><Description><![CDATA[Positive if increasing and a > b, or not increasing and a < b, 0 if equal and negative otherwise.]]></Description></Returns><Parameters><Parameter name="a" type="any"/><Parameter name="b" type="any"/></Parameters></Action></Type><Type category="Event" name="FixedSizeCircularBuffer"><Description><![CDATA[A fixed-sized circular buffer object.

 Once the buffer is full, adding another value removes the oldest one in the buffer.]]></Description><Summary><![CDATA[A fixed-sized circular buffer object.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="data" private="true" type="sequence"><Parameters><Parameter type="any"/></Parameters><Description/><Summary/><TypeParameters/></Member><Member name="_capacity" private="true" type="integer"><Description/><Summary/><TypeParameters/></Member><Action name="size" staticNature=""><Description><![CDATA[Return the number of values in the buffer.]]></Description><Summary><![CDATA[Return the number of values in the buffer.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="integer"/></Action><Action name="get" staticNature=""><Description><![CDATA[Return the item currently at the given position in the buffer.]]></Description><Summary><![CDATA[Return the item currently at the given position in the buffer.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="any"/><Parameters><Parameter name="offs" type="integer"><Description><![CDATA[The offset into the buffer, with 0 being the oldest and capacity-1 being the most recent.]]></Description></Parameter></Parameters></Action><Action name="clear" staticNature=""><Description><![CDATA[Remove all the values in the buffer.]]></Description><Summary><![CDATA[Remove all the values in the buffer.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/></Action><Action name="create" staticNature="static "><Description><![CDATA[Create an empty buffer of a particular size.]]></Description><Summary><![CDATA[Create an empty buffer of a particular size.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax.containers" type="FixedSizeCircularBuffer"/><Parameters><Parameter name="size" type="integer"><Description><![CDATA[The maximum capacity of the buffer.]]></Description></Parameter></Parameters></Action><Action name="push" staticNature=""><Description><![CDATA[Push a value onto the buffer. If the buffer is full, removes the oldest value.]]></Description><Summary><![CDATA[Push a value onto the buffer. If the buffer is full, removes the oldest value.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="val" type="any"/></Parameters></Action><Action name="getData" staticNature=""><Description><![CDATA[Return the underlying sequence containing the circular buffer in order. This is returned by reference. You should not modify the return value, only clone it or iterate over it.]]></Description><Summary><![CDATA[Return the underlying sequence containing the circular buffer in order. This is returned by reference. You should not modify the return value, only clone it or iterate over it.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="sequence"><Parameters><Parameter type="any"/></Parameters></Returns></Action><Action name="capacity" staticNature=""><Description><![CDATA[Return the capacity of this circular buffer.]]></Description><Summary><![CDATA[Return the capacity of this circular buffer.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="integer"/></Action><Action name="empty" staticNature=""><Description><![CDATA[Returns true if the buffer is empty.]]></Description><Summary><![CDATA[Returns true if the buffer is empty.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="boolean"/></Action><Action name="full" staticNature=""><Description><![CDATA[Returns true if the buffer is full (size() == capacity()).]]></Description><Summary><![CDATA[Returns true if the buffer is full (size() == capacity()).]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="boolean"/></Action></Type><Type category="Event" name="HeapIntegerFieldComparator"><Description><![CDATA[A comparator for a heap containing events, given a field name which will be an integer to order the heap.]]></Description><Summary><![CDATA[A comparator for a heap containing events, given a field name which will be an integer to order the heap.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="fieldName" type="string"><TypeParameters/></Member><Member name="increasing" type="boolean"><TypeParameters/></Member><Action name="compare" staticNature=""><Description><![CDATA[Compare two events.]]></Description><Summary><![CDATA[Compare two events.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="integer"><Description><![CDATA[Positive if increasing and a > b, or not increasing and a < b, 0 if equal and negative otherwise.]]></Description></Returns><Parameters><Parameter name="a" type="any"/><Parameter name="b" type="any"/></Parameters></Action></Type><Type category="Event" name="HeapStringComparator"><Description><![CDATA[A comparator for a heap containing strings.]]></Description><Summary><![CDATA[A comparator for a heap containing strings.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="increasing" type="boolean"><TypeParameters/></Member><Action name="compare" staticNature=""><Description><![CDATA[Compare two strings.]]></Description><Summary><![CDATA[Compare two strings.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="integer"><Description><![CDATA[Positive if increasing and a > b, or not increasing and a < b, 0 if equal and negative otherwise.]]></Description></Returns><Parameters><Parameter name="a" type="any"/><Parameter name="b" type="any"/></Parameters></Action></Type><Type category="Event" name="Queue"><Description><![CDATA[A First-In-First-Out queue object.]]></Description><Summary><![CDATA[A First-In-First-Out queue object.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="data" private="true" type="sequence"><Parameters><Parameter type="any"/></Parameters><Description/><Summary/><TypeParameters/></Member><Action name="pop" staticNature=""><Description><![CDATA[Remove and return the value on the front of the queue.]]></Description><Summary><![CDATA[Remove and return the value on the front of the queue.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="any"/></Action><Action name="size" staticNature=""><Description><![CDATA[Return the number of items in the queue.]]></Description><Summary><![CDATA[Return the number of items in the queue.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="integer"/></Action><Action name="peekNext" staticNature=""><Description><![CDATA[Return the front value on the queue without removing it.]]></Description><Summary><![CDATA[Return the front value on the queue without removing it.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="any"/></Action><Action name="clear" staticNature=""><Description><![CDATA[Remove all the contents of the queue.]]></Description><Summary><![CDATA[Remove all the contents of the queue.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/></Action><Action name="create" staticNature="static "><Description><![CDATA[Create an empty queue.]]></Description><Summary><![CDATA[Create an empty queue.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax.containers" type="Queue"/></Action><Action name="push" staticNature=""><Description><![CDATA[Push a value onto the back of the queue.]]></Description><Summary><![CDATA[Push a value onto the back of the queue.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="val" type="any"/></Parameters></Action><Action name="empty" staticNature=""><Description><![CDATA[Return true if the queue is empty.]]></Description><Summary><![CDATA[Return true if the queue is empty.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="boolean"/></Action></Type><Type category="Event" name="Heap"><Description><![CDATA[A Max/Min-value Heap object with configurable type comparators.

 Create with a comparator object determining the Heap order and comparison function.

 Several built-in comparators are available.]]></Description><Summary><![CDATA[A Max/Min-value Heap object with configurable type comparators.]]></Summary><TypeParameters/><See package="com.apamax.containers" type="HeapIntegerFieldComparator"><Description/></See><See package="com.apamax.containers" type="HeapIntegerComparator"><Description/></See><See package="com.apamax.containers" type="HeapStringComparator"><Description/></See><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="data" private="true" type="sequence"><Parameters><Parameter type="any"/></Parameters><Description/><Summary/><TypeParameters/></Member><Member name="comparator" private="true" type="action"><Parameters><Parameter type="any"/><Parameter type="any"/></Parameters><Returns type="integer"/><Description/><Summary/><TypeParameters/></Member><Action name="swap" private="true" staticNature=""><Description/><Summary/><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="a" type="integer"/><Parameter name="b" type="integer"/></Parameters></Action><Action name="heapifyDown" private="true" staticNature=""><Description/><Summary/><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="index" type="integer"/></Parameters></Action><Action name="rightChildOf" private="true" staticNature=""><Description/><Summary/><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="integer"/><Parameters><Parameter name="index" type="integer"/></Parameters></Action><Action name="parentOf" private="true" staticNature=""><Description/><Summary/><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="integer"/><Parameters><Parameter name="index" type="integer"/></Parameters></Action><Action name="peekTop" staticNature=""><Description><![CDATA[Return the top value from the heap, according to its comparator.]]></Description><Summary><![CDATA[Return the top value from the heap, according to its comparator.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="any"/></Action><Action name="push" staticNature=""><Description><![CDATA[Push a new value into the heap, maintaining the heap.]]></Description><Summary><![CDATA[Push a new value into the heap, maintaining the heap.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="val" type="any"/></Parameters></Action><Action name="empty" staticNature=""><Description><![CDATA[Returns true if the heap is empty.]]></Description><Summary><![CDATA[Returns true if the heap is empty.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="boolean"/></Action><Action name="pop" staticNature=""><Description><![CDATA[Remove and return the top value from the heap, according to its comparator, maintaining the heap.]]></Description><Summary><![CDATA[Remove and return the top value from the heap, according to its comparator, maintaining the heap.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="any"/></Action><Action name="size" staticNature=""><Description><![CDATA[Returns the number of values in the heap.]]></Description><Summary><![CDATA[Returns the number of values in the heap.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="integer"/></Action><Action name="create" staticNature="static "><Description><![CDATA[Create an empty heap with the given comparator. The comparator determines if this is a min-heap or a max-heap and how to compare the values.]]></Description><Summary><![CDATA[Create an empty heap with the given comparator. The comparator determines if this is a min-heap or a max-heap and how to compare the values.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="integer"/><Parameters><Parameter name="comparator" type="any"><Description><![CDATA[A Comparator object with a <tt>compare</tt> action with the signature <tt>action&lt;any, any&gt; returns integer</tt>.]]></Description></Parameter></Parameters></Action><Action name="leftChildOf" private="true" staticNature=""><Description/><Summary/><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="integer"/><Parameters><Parameter name="index" type="integer"/></Parameters></Action><Action name="heapify" staticNature="static "><Description><![CDATA[Create an in-place heap on the given sequence, with the given comparator. The comparator determines if this is a min-heap or a max-heap and how to compare the values.]]></Description><Summary><![CDATA[Create an in-place heap on the given sequence, with the given comparator. The comparator determines if this is a min-heap or a max-heap and how to compare the values.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="integer"/><Parameters><Parameter name="data" type="sequence"><Parameters><Parameter type="any"/></Parameters><Description><![CDATA[A sequence which will be heapified in-place and further heap operations will be made on the array.]]></Description></Parameter><Parameter name="comparator" type="any"><Description><![CDATA[A Comparator object with a <tt>compare</tt> action with the signature <tt>action&lt;any, any&gt; returns integer</tt>.]]></Description></Parameter></Parameters></Action><Action name="heapifyUp" private="true" staticNature=""><Description/><Summary/><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="index" type="integer"/></Parameters></Action><Action name="makeHeap" private="true" staticNature=""><Description/><Summary/><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/></Action></Type><Type category="Event" name="Stack"><Description><![CDATA[A Last-In-First-Out stack object.]]></Description><Summary><![CDATA[A Last-In-First-Out stack object.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="data" private="true" type="sequence"><Parameters><Parameter type="any"/></Parameters><Description/><Summary/><TypeParameters/></Member><Action name="pop" staticNature=""><Description><![CDATA[Remove and return the top value from the stack.]]></Description><Summary><![CDATA[Remove and return the top value from the stack.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="any"/></Action><Action name="size" staticNature=""><Description><![CDATA[Return the number of values in the stack.]]></Description><Summary><![CDATA[Return the number of values in the stack.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="integer"/></Action><Action name="clear" staticNature=""><Description><![CDATA[Remove all of the values in the stack.]]></Description><Summary><![CDATA[Remove all of the values in the stack.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/></Action><Action name="create" staticNature="static "><Description><![CDATA[Create an empty stack.]]></Description><Summary><![CDATA[Create an empty stack.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax.containers" type="Stack"/></Action><Action name="push" staticNature=""><Description><![CDATA[Push a value onto the top of the stack.]]></Description><Summary><![CDATA[Push a value onto the top of the stack.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="val" type="any"/></Parameters></Action><Action name="peekTop" staticNature=""><Description><![CDATA[Return the top value from the stack without removing it.]]></Description><Summary><![CDATA[Return the top value from the stack without removing it.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="any"/></Action><Action name="empty" staticNature=""><Description><![CDATA[Return true if the stack is empty.]]></Description><Summary><![CDATA[Return true if the stack is empty.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="boolean"/></Action></Type></Package></Packages>